[
  {
    "wiki": "API",
    "general": "서로 다른 프로그램이 통신할 수 있게 만들어주는 도구",
    "expert": "응용 프로그램 간에 데이터를 교환하거나 기능을 공유할 수 있도록 정의된 인터페이스"
  },
  {
    "wiki": "HTTP",
    "general": "인터넷에서 웹 페이지를 가져올 때 사용하는 규칙",
    "expert": "웹 클라이언트와 서버 간 통신에 사용되는 애플리케이션 계층 프로토콜로, 요청과 응답 구조를 기반으로 함"
  },
  {
    "wiki": "REST",
    "general": "웹상에서 자원을 쉽게 관리하고 접근하는 방법",
    "expert": "HTTP를 활용하여 자원의 상태를 표현하고 전송하는 아키텍처 스타일로, CRUD 작업을 HTTP 메서드로 표현"
  },
  {
    "wiki": "CRUD",
    "general": "데이터를 만들고 읽고 바꾸고 삭제하는 기본 작업",
    "expert": "Create, Read, Update, Delete의 약자로, 데이터베이스나 API 등에서 데이터를 관리하는 기본 연산"
  },
  {
    "wiki": "JSON",
    "general": "데이터를 주고받을 때 사용하는 가벼운 데이터 형식",
    "expert": "JavaScript 객체 표기법으로, 키-값 쌍의 구조화된 데이터 전송을 위한 경량 데이터 교환 형식"
  },
  {
    "wiki": "Git",
    "general": "소스 코드를 관리하는 도구",
    "expert": "분산 버전 관리 시스템으로, 코드 변경 내역을 추적하고 협업 개발을 효율적으로 지원하는 도구"
  },
  {
    "wiki": "Docker",
    "general": "프로그램을 쉽게 실행할 수 있게 도와주는 가상화 도구",
    "expert": "애플리케이션과 의존성을 격리된 컨테이너로 패키징하여 일관된 환경에서 실행할 수 있도록 하는 컨테이너화 기술"
  },
  {
    "wiki": "CI/CD",
    "general": "소프트웨어를 자동으로 빌드하고 배포하는 과정",
    "expert": "Continuous Integration(지속적 통합)과 Continuous Delivery/Deployment(지속적 배포)를 합친 개념으로, 개발 코드 변경 사항을 빠르고 안정적으로 배포하기 위한 프로세스"
  },
  {
    "wiki": "알고리즘",
    "general": "어떤 문제를 해결하기 위한 단계적 절차",
    "expert": "특정 작업을 완료하기 위해 명확히 정의된 유한한 단계들의 집합"
  },
  {
    "wiki": "Cache",
    "general": "자주 쓰는 데이터를 빠르게 접근할 수 있도록 저장하는 메모리",
    "expert": "성능 향상을 위해 자주 참조되는 데이터를 임시로 저장하는 고속 저장 장치"
  },
  {
    "wiki": "Firewall",
    "general": "네트워크에서 위험한 데이터를 막아주는 장치",
    "expert": "네트워크 간 통신을 감시하고 허용된 트래픽만 통과시키는 보안 장치"
  },
  {
    "wiki": "Framework",
    "general": "소프트웨어 개발을 도와주는 틀",
    "expert": "소프트웨어 개발을 위한 구조와 규칙을 제공하여 개발 과정을 간소화하는 코드 라이브러리 및 도구 모음"
  },
  {
    "wiki": "IDE",
    "general": "소프트웨어를 개발할 때 사용하는 통합 개발 환경",
    "expert": "코딩, 디버깅, 빌드 등 소프트웨어 개발 전 과정을 지원하는 통합 개발 환경"
  },
  {
    "wiki": "OAuth",
    "general": "서드파티 애플리케이션이 사용자 비밀번호 없이 안전하게 리소스 접근 권한을 얻도록 해 주는 인증 프로토콜입니다.",
    "expert": "OAuth는 권한 위임 표준으로, 리소스 소유자(사용자)가 클라이언트(서드파티 앱)에게 자신의 리소스 서버에 대한 접근 권한을 제한된 범위(scope) 내에서 발급할 수 있게 합니다. 인증 과정에는 권한 부여 코드 그랜트, 암시적 그랜트, 리소스 소유자 비밀번호 크리덴셜 그랜트, 클라이언트 자격 증명 그랜트 등이 있으며, 액세스 토큰과 리프레시 토큰을 사용해 토큰 수명을 관리합니다."
  },
  {
    "wiki": "SQL",
    "general": "관계형 데이터베이스를 관리하고 질의하기 위한 표준 언어입니다.",
    "expert": "SQL(Structured Query Language)은 테이블 기반의 관계형 데이터베이스에서 데이터 정의(DDL), 데이터 조작(DML), 데이터 제어(DCL)를 처리합니다. 주요 기능으로는 SELECT, INSERT, UPDATE, DELETE 쿼리와 트랜잭션 제어(ACID 보장), JOIN 연산, 인덱스 및 뷰 생성 등이 있으며, RDBMS 벤더별로 확장 기능(프로시저, 함수, 윈도우 함수 등)을 제공합니다."
  },
  {
    "wiki": "NoSQL",
    "general": "전통적 테이블 구조 대신 유연한 스키마를 사용하는 비관계형 데이터베이스입니다.",
    "expert": "NoSQL은 Key–Value, 문서(Document), 컬럼 패밀리, 그래프 등 다양한 데이터 모델을 지원하며, 수평적 확장성과 고성능을 특징으로 합니다. CAP 정리를 따르며 일관성, 가용성, 분할 내성을 트레이드오프할 수 있고, MongoDB, Cassandra, Redis, Neo4j 등이 대표적입니다."
  },
  {
    "wiki": "React",
    "general": "UI 구축을 위한 선언적 컴포넌트 기반 자바스크립트 라이브러리입니다.",
    "expert": "React는 페이스북이 개발한 라이브러리로, Virtual DOM을 사용해 UI 변경을 효율적으로 렌더링합니다. 컴포넌트 단위로 재사용 가능하며, 상태(state)와 속성(props) 개념으로 데이터 흐름을 관리합니다. Hooks로 함수형 컴포넌트에서도 상태 관리와 라이프사이클 기능을 사용할 수 있습니다."
  },
  {
    "wiki": "Kubernetes",
    "general": "컨테이너화된 애플리케이션의 배포·확장·운영을 자동화해 주는 오케스트레이션 플랫폼입니다.",
    "expert": "Kubernetes는 마스터 노드의 API 서버, 스케줄러, 컨트롤러 매니저와 워커 노드의 Kubelet, 컨테이너 런타임, kube-proxy로 구성됩니다. Pod, Deployment, Service, ConfigMap, Secret 등을 통해 선언적 방식으로 상태를 관리하며, 셀프 힐링, 롤링 업데이트, 수평 포드 자동 확장(HPA) 등의 기능을 제공합니다."
  },
  {
    "wiki": "Node.js",
    "general": "크롬 V8 엔진 위에서 동작하는 서버 사이드 자바스크립트 런타임입니다.",
    "expert": "Node.js는 이벤트 기반 비동기 I/O 모델을 사용해 높은 처리량을 실현합니다. npm 에코시스템을 통해 수많은 패키지를 활용할 수 있으며, Express, Koa 등의 프레임워크로 웹 서버를 개발합니다. 싱글 스레드 이벤트 루프 구조로 블로킹 연산을 피해야 하며, 클러스터링으로 멀티 코어 활용이 가능합니다."
  },
  {
    "wiki": "Microservice",
    "general": "독립적으로 배포·확장 가능한 작은 단위의 서비스들로 시스템을 구성하는 아키텍처 스타일입니다.",
    "expert": "마이크로서비스 아키텍처는 각 서비스가 독립된 데이터 저장소를 가지며, REST, gRPC, 메시지 큐 등으로 통신합니다. 팀별로 서비스 소유권을 가지고, CI/CD 파이프라인을 통해 빠른 배포가 가능하며, 장애 격리, 기술 스택 자유도 등의 장점이 있지만, 분산 트랜잭션, 서비스 디스커버리, 모니터링 등의 복잡도가 높아집니다."
  },
  {
    "wiki": "SSH",
    "general": "네트워크 상에서 안전하게 원격 접속을 제공하는 프로토콜입니다.",
    "expert": "SSH(Secure Shell)는 공개키 암호화와 대칭키 암호화를 조합해 인증과 세션 암호화를 수행합니다. 포트 포워딩, 터널링, SFTP 파일 전송 등을 지원하며, RSA, ECDSA 등 키 관리 방식을 통해 비밀번호 없이 인증할 수 있습니다."
  },
  {
    "wiki": "WebSocket",
    "general": "클라이언트와 서버 간에 양방향 실시간 통신을 가능하게 하는 프로토콜입니다.",
    "expert": "WebSocket은 HTTP 핸드셰이크로 연결을 시작한 뒤, 전용 포트를 이용해 지속적이고 양방향의 프레임 기반 통신을 수행합니다. 낮은 레이턴시와 헤더 오버헤드 감소를 통해 채팅, 실시간 게임, 주식 시세 표시 등 실시간 애플리케이션에 적합합니다."
  },
  {
    "wiki": "빅데이터",
    "general": "기존 시스템으로 처리하기 어려운 방대한 규모의 데이터를 가리킵니다.",
    "expert": "빅데이터는 Volume(용량), Velocity(속도), Variety(다양성)의 3V 특성을 가지며, Hadoop 에코시스템(HDFS, MapReduce), Spark, NoSQL 저장소를 활용해 저장 및 병렬 처리합니다. 데이터 웨어하우스, 데이터 레이크, 스트리밍 분석, 머신러닝 파이프라인 구축에 사용됩니다."
  },
  {
    "wiki": "Machine Learning",
    "general": "데이터를 학습해 예측·분류 모델을 자동으로 만드는 기계 학습 기술입니다.",
    "expert": "머신러닝은 지도학습, 비지도학습, 강화학습으로 나뉘며, 회귀, 분류, 군집화 알고리즘과 딥러닝(신경망)을 포함합니다. 모델 학습 시 오버피팅, 데이터 전처리, 하이퍼파라미터 튜닝, 교차 검증을 통해 일반화 성능을 높입니다."
  },
  {
    "wiki": "AI",
    "general": "인간의 지능적 작업을 모방하는 컴퓨터 시스템 분야입니다.",
    "expert": "AI는 퍼셉트론, 전문가 시스템, 머신러닝, 딥러닝 등으로 발전해 왔습니다. 자연어 처리, 컴퓨터 비전, 음성 인식, 자율주행 등 다양한 분야에 적용되며, 지식 표현, 추론, 계획, 학습, 문제 해결을 통해 지능형 에이전트를 구현합니다."
  },
  {
    "wiki": "DevOps",
    "general": "개발(Development)과 운영(Operations)의 협업을 통해 소프트웨어 전달 속도와 신뢰성을 높이는 문화 및 방법론입니다.",
    "expert": "DevOps는 자동화, 인프라 코드(IaC), 모니터링, 피드백 고리 구축을 핵심으로 합니다. 조직 구조, CI/CD, 컨테이너 오케스트레이션(Kubernetes), 로깅·모니터링(Prometheus, ELK) 도구를 통합해 데브와 옵스 간 장벽을 허물고 배포 주기를 단축합니다."
  },
  {
    "wiki": "Jenkins",
    "general": "플러그인 기반의 오픈소스 자동화 서버로, 빌드·테스트·배포 파이프라인을 관리합니다.",
    "expert": "Jenkins는 파이프라인 스크립트(Jenkinsfile)를 통해 CI/CD 워크플로우를 코드화합니다. 마스터-에이전트 구조로 병렬 작업을 분산 실행하며, 수천 개의 플러그인으로 SCM, 빌드 도구, 알림, 배포 환경과 통합됩니다."
  },
  {
    "wiki": "Kafka",
    "general": "고처리량 실시간 스트리밍 데이터를 퍼블리시/서브스크라이브 방식으로 처리하는 분산 메시징 시스템입니다.",
    "expert": "Apache Kafka는 토픽(topic) 단위로 메시지를 분산 저장하고, 파티션(partition)으로 병렬 처리를 지원합니다. 프로듀서-컨슈머 모델, 컨슈머 그룹, 오프셋 관리로 유연한 메시지 소비를 제공하며, 스트림 프로세싱을 위한 Kafka Streams API를 포함합니다."
  },
  {
    "wiki": "RabbitMQ",
    "general": "AMQP 프로토콜 기반의 오픈소스 메시지 브로커입니다.",
    "expert": "RabbitMQ는 익스체인지(exchange), 큐(queue), 바인딩(binding) 개념으로 메시지를 라우팅합니다. ACK, 재시도, DLX(Dead Letter Exchange)로 신뢰성을 보장하며, 플러그인 시스템으로 MQTT, STOMP, HTTP API를 지원합니다."
  },
  {
    "wiki": "HLS",
    "general": "애플리케이션이 HTTP를 통해 비디오를 작은 조각으로 전송하여 재생하는 HTTP 기반 스트리밍 프로토콜입니다.",
    "expert": "HLS(HTTP Live Streaming)는 애플이 개발한 프로토콜로, 미디어를 짧은 TS(segment) 파일로 분할하고 M3U8 플레이리스트(manifest)를 통해 클라이언트에게 전달합니다. 클라이언트는 네트워크 상황에 따라 적절한 비트레이트 스트림을 선택(어댑티브 비트레이트)하며, CDN과 결합해 대규모 배포에 적합합니다."
  },
  {
    "wiki": "RTMP",
    "general": "실시간으로 오디오·비디오 데이터를 전송하기 위한 Adobe의 플래시 기반 스트리밍 프로토콜입니다.",
    "expert": "RTMP(Real-Time Messaging Protocol)는 TCP 연결 위에서 AMF(Adobe Message Format)로 패킷을 캡슐화해 지연을 최소화하며 스트리밍합니다. 일반적으로 인코더에서 RTMP로 미디어 서버(예: Wowza, Nginx RTMP Module)로 전송한 뒤, HLS/DASH로 변환해 대규모 소비자에게 배포합니다."
  },
  {
    "wiki": "MPEG-DASH",
    "general": "HLS와 유사하게 HTTP를 기반으로 한 ISO 표준 어댑티브 스트리밍 프로토콜입니다.",
    "expert": "MPEG-DASH(Dynamic Adaptive Streaming over HTTP)는 MPD(Media Presentation Description)라는 XML 기반 manifest를 사용해 세그먼트를 설명합니다. ISO 표준으로 벤더 종속성이 없으며, CMAF(Common Media Application Format)와 결합해 저지연 스트리밍을 지원할 수 있습니다."
  },
  {
    "wiki": "Adaptive Bitrate Streaming",
    "general": "재생 중 네트워크 상태에 따라 자동으로 비트레이트를 전환해 끊김 없이 재생하는 기술입니다.",
    "expert": "어댑티브 스트리밍은 클라이언트가 manifest(playlist)를 통해 여러 해상도·비트레이트 세그먼트를 탐색하고, 버퍼 상태와 다운로드 속도를 기반으로 최적의 세그먼트를 선택합니다. HLS, MPEG-DASH 등이 대표적이며, 초기화(segment initialization)와 세그먼트 간 전환 전략이 핵심 기술입니다."
  },
  {
    "wiki": "Encoder",
    "general": "원본 비디오/오디오 데이터를 압축 형식으로 변환하는 소프트웨어 또는 하드웨어입니다.",
    "expert": "인코더는 YUV/RGB 원본 데이터를 H.264, H.265, AAC 등의 코덱을 사용해 압축합니다. 실시간 스트리밍에서는 소프트웨어(FFmpeg, OBS) 또는 하드웨어(VPU, ASIC) 인코더가 사용되며, GOP 구조, 프로파일(Profile), 레벨(Level) 설정이 품질과 지연에 영향을 줍니다."
  },
  {
    "wiki": "Transcoder",
    "general": "이미 압축된 미디어를 다른 포맷이나 비트레이트로 재인코딩하는 장치 또는 소프트웨어입니다.",
    "expert": "트랜스코더는 입력 스트림을 디코딩한 후 다른 코덱이나 설정으로 재인코딩합니다. 라이브 스트리밍 환경에서는 인풋 RTMP 스트림을 받아 HLS용 TS 세그먼트, DASH용 FMP4 세그먼트 등으로 동시에 변환해 다양한 디바이스에 최적화된 콘텐츠를 제공합니다."
  },
  {
    "wiki": "TS Segment",
    "general": "HLS 스트리밍에서 사용하는 MPEG-2 Transport Stream 단위의 작은 미디어 파일입니다.",
    "expert": "TS 세그먼트는 일반적으로 2~10초 길이의 TS 컨테이너로, PES(Packetized Elementary Stream)를 포함합니다. 각 세그먼트 헤더에는 PCR(Program Clock Reference)이 포함되어 싱크를 유지하며, discontinuity 태그를 통해 트랙 전환을 알릴 수 있습니다."
  },
  {
    "wiki": "FFmpeg",
    "general": "다양한 코덱과 포맷을 지원하는 오픈소스 멀티미디어 처리 라이브러리 및 CLI 툴킷입니다.",
    "expert": "FFmpeg는 인코딩, 디코딩, 트랜스코딩, 리매플링, 스트리밍(FFmpeg Protocols) 기능을 제공합니다. libavcodec, libavformat, libavfilter 등의 라이브러리를 통해 복잡한 파이프라인을 구성할 수 있으며, HLS 패키징(ffmpeg -hls)에 자주 사용됩니다."
  },
  {
    "wiki": "Backend",
    "general": "사용자에게 보이지 않는 서버 측 애플리케이션 로직과 데이터베이스를 담당하는 영역입니다.",
    "expert": "백엔드는 API 서버, 인증·인가, 비즈니스 로직, 데이터 영속화를 담당합니다. RESTful API, GraphQL, gRPC 등을 통해 프론트엔드와 통신하며, Node.js, Django, Spring Boot, Ruby on Rails 같은 프레임워크를 사용합니다."
  },
  {
    "wiki": "Frontend",
    "general": "사용자가 직접 상호작용하는 웹 브라우저 또는 클라이언트 애플리케이션의 UI와 UX를 담당하는 영역입니다.",
    "expert": "프론트엔드는 HTML, CSS, JavaScript(또는 TypeScript) 기반으로 구성되며, React, Angular, Vue.js 같은 프레임워크/라이브러리를 사용합니다. 번들러(Webpack, Vite), 상태 관리(Redux, Zustand), SSR/CSR 전략을 통해 성능과 사용자 경험을 최적화합니다."
  },
  {
    "wiki": "BFF",
    "general": "프론트엔드 요구사항에 맞춰 API를 조합·가공하는 백엔드 레이어 패턴입니다.",
    "expert": "BFF 패턴은 모바일, 웹, IoT 등 클라이언트별로 별도의 백엔드를 두어 최적화된 API 응답을 제공합니다. 클라이언트 로직을 단순화하고, 오버페칭/언더페칭을 방지하며, 인증·권한 처리, 캐싱 전략도 클라이언트 특징에 맞게 설계합니다."
  },
  {
    "wiki": "SSR",
    "general": "서버에서 HTML을 미리 렌더링해 초기 페이지 로딩을 빠르게 하는 렌더링 방식입니다.",
    "expert": "SSR은 Next.js, Nuxt.js 같은 프레임워크가 지원하며, 페이지 요청 시 서버에서 React/Vue 컴포넌트를 렌더링해 완전한 HTML을 클라이언트에 전달합니다. SEO 개선, 첫 콘텐츠 페인트(FCP) 단축, 클라이언트 번들 사이즈 감소 장점이 있지만 서버 부하가 증가합니다."
  },
  {
    "wiki": "CSR",
    "general": "브라우저에서 자바스크립트로 HTML을 동적으로 생성해 렌더링하는 방식입니다.",
    "expert": "CSR은 초기에 최소한의 HTML과 자바스크립트 번들만 다운로드한 뒤, 런타임에서 React/Vue 등 프레임워크가 가상 DOM을 사용해 화면을 구성합니다. 사용자 상호작용 후 즉각적인 UI 업데이트와 리치 인터랙티브 경험을 제공하나, 초기 로딩이 느릴 수 있습니다."
  },
  {
    "wiki": "SPA",
    "general": "단일 HTML 페이지로 시작해 자바스크립트로 화면을 전환하는 웹 애플리케이션 아키텍처입니다.",
    "expert": "SPA는 클라이언트 라우팅(history API), 코드 스플리팅, 상태 관리 등을 활용해 페이지 이동 없이 빠른 사용자 경험을 제공합니다. React Router, Vue Router 같은 라이브러리로 라우팅을 처리하며, 백엔드에는 API 서버만 필요합니다."
  },
  {
    "wiki": "API Gateway",
    "general": "클라이언트 요청을 적절한 마이크로서비스로 라우팅하고, 보안·모니터링을 책임지는 진입점입니다.",
    "expert": "API Gateway는 인증·인가(JWT 검증, OAuth), 라우팅, 로드 밸런싱, 캐싱, 요청 변환, 로깅, 속도 제한(rate limiting) 기능을 제공합니다. Kong, AWS API Gateway, Apigee 등이 대표적이며, 마이크로서비스 아키텍처의 핵심 컴포넌트입니다."
  },
  {
    "wiki": "JDBC",
    "general": "자바 프로그램이 데이터베이스와 쉽게 대화할 수 있게 도와주는 도구",
    "expert": "Java Database Connectivity의 약자로 Java 기반 애플리케이션의 데이터를 데이터베이스에 저장 및 업데이트하거나, 데이터베이스에 저장된 데이터를 Java에서 사용할 수 있도록 하는 자바 API이다."
  },
  {
    "wiki": "SQL",
    "general": "관계형 데이터베이스에서 데이터를 정의, 조작, 조회할 수 있게 해주는 표준화된 언어",
    "expert": "Structured Query Language의 약자로, SELECT, INSERT, UPDATE, DELETE 등 다양한 쿼리문을 사용해 RDBMS에서 데이터 작업을 수행할 수 있는 표준 언어이다."
  },
  {
    "wiki": "JPA",
    "general": "자바 객체와 관계형 데이터베이스 테이블 간의 매핑을 제공하는 자바 표준 ORM 사양",
    "expert": "Java Persistence API의 약자로, 객체-관계 매핑(ORM) 프레임워크를 위한 인터페이스와 애노테이션을 정의한다. 엔티티의 생명 주기 관리, JPQL 쿼리, 영속성 컨텍스트 등을 통해 데이터베이스 연동을 추상화하여 생산성을 높인다."
  },
  {
    "wiki": "Spring",
    "general": "자바 애플리케이션 개발을 위한 경량 오픈소스 프레임워크",
    "expert": "스프링 프레임워크는 DI/IoC 컨테이너, AOP, 트랜잭션 관리, MVC 웹 프레임워크 등의 모듈로 구성되어 있다. 자바 기반 엔터프라이즈 애플리케이션 개발 시 모듈 단위로 다양한 기능을 제공해 개발 생산성과 유지보수성을 향상시킨다."
  }
]
